/*! enduring-stash 09-11-2013 */
!function() {
    "use strict";
    var enduring = window.enduring || void 0;
    if (!enduring) throw "Enduring Stash: Enduring Stash is missing!";
    var MemoryStorage = function() {
        this.storage = {};
    };
    return MemoryStorage.prototype.get = function(key, promise) {
        promise.resolve(this.storage[key]);
    }, MemoryStorage.prototype.getAll = function(key, promise) {
        var items = [];
        for (var itemKey in this.storage) this.storage.hasOwnProperty(itemKey) && itemKey.substring(0, key.length) === key && items.push(this.storage[itemKey]);
        promise.resolve(items);
    }, MemoryStorage.prototype.set = function(key, value, promise) {
        this.storage[key] = value, promise.resolve(value);
    }, MemoryStorage.prototype.add = function(key, value, promise) {
        this.storage.hasOwnProperty(key) ? promise.reject("Item already exists") : (this.storage[key] = value, 
        promise.resolve(value));
    }, MemoryStorage.prototype.update = function(key, value, promise) {
        this.storage.hasOwnProperty(key) ? (this.storage[key] = value, promise.resolve(value)) : promise.reject("Item does not exist");
    }, MemoryStorage.prototype.remove = function(key, promise) {
        this.storage.hasOwnProperty(key) && delete this.storage[key], promise.resolve();
    }, MemoryStorage.prototype.contains = function(key, promise) {
        promise.resolve(this.storage.hasOwnProperty(key));
    }, MemoryStorage.prototype.removeAll = function(promise) {
        this.storage = {}, promise.resolve();
    }, enduring.provider.registerProvider("Memory", MemoryStorage), MemoryStorage;
}();