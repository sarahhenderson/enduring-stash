/*! enduring-stash 09-11-2013 */
!function() {
    "use strict";
    var enduring = window.enduring || void 0;
    if (!enduring) throw "Enduring Stash: Enduring Stash is missing!";
    var LocalStorage = function() {
        this.storage = window.localStorage;
    }, SessionStorage = function() {
        this.storage = window.sessionStorage;
    };
    return LocalStorage.prototype.get = function(key, promise) {
        try {
            var item = this.storage.getItem(key);
            item = null !== item && "undefined" !== item ? this.unstringify(item) : void 0, 
            promise.resolve(item);
        } catch (e) {
            promise.reject(e);
        }
    }, LocalStorage.prototype.set = function(key, value, promise) {
        try {
            this.storage.setItem(key, this.stringify(value)), promise.resolve(value);
        } catch (e) {
            22 === e.code || 2147942414 === e.number ? promise.reject({
                message: "QUOTA_EXCEEDED_ERR",
                error: e
            }) : promise.reject(e);
        }
    }, LocalStorage.prototype.getAll = function(key, promise) {
        try {
            for (var items = [], len = this.storage.length, i = 0; len > i; i += 1) {
                var itemKey = this.storage.key(i);
                if (itemKey.substring(0, key.length) === key) {
                    var item = this.unstringify(this.storage.getItem(itemKey));
                    items.push(item);
                }
            }
            promise.resolve(items);
        } catch (e) {
            promise.reject(e);
        }
    }, LocalStorage.prototype.update = function(key, value, promise) {
        try {
            var item = this.storage.getItem(key);
            null === item ? promise.reject("Item does not exist") : this.set(key, value, promise);
        } catch (e) {
            promise.reject(e);
        }
    }, LocalStorage.prototype.add = function(key, value, promise) {
        try {
            var item = this.storage.getItem(key);
            null !== item ? promise.reject("Item already exists") : this.set(key, value, promise);
        } catch (e) {
            promise.reject(e);
        }
    }, LocalStorage.prototype.remove = function(key, promise) {
        try {
            this.storage.removeItem(key), promise.resolve();
        } catch (e) {
            promise.reject(e);
        }
    }, LocalStorage.prototype.contains = function(key, promise) {
        try {
            var item = this.storage.getItem(key);
            promise.resolve(null !== item);
        } catch (e) {
            promise.reject(e);
        }
    }, LocalStorage.prototype.removeAll = function(promise) {
        try {
            this.storage.clear(), promise.resolve();
        } catch (e) {
            promise.reject(e);
        }
    }, window.localStorage ? (enduring.provider.registerProvider("LocalStorage", LocalStorage), 
    LocalStorage) : window.sessionStorage ? (SessionStorage.prototype = LocalStorage.prototype, 
    enduring.provider.registerProvider("SessionStorage", SessionStorage), LocalStorage) : void 0;
}();